apiVersion: akri.sh/v0
kind: Configuration
metadata:
  name: akri-http-device
spec:
  discoveryHandler: 
    name: akri-http-discovery-handler # name of the http device discovery handler
    discoveryDetails: |+
      httpDevices:
      - id: http-device-1
        endpoint: "http://http-device-001:8080/device/input"     
      - id: http-device-2
        endpoint: "http://http-device-002:8080/device/input"             
  brokerSpec:
    brokerPodSpec:
      serviceAccountName: mqtt-client
      containers:
      - name: akri-http-broker # name of the http broker
        image: replaceme.azurecr.io/http-broker:latest # CHANGE TO YOUR CONTAINER REGISTRY
        env:
          - name: DATA_MQ_ENDPOINT
            value: "aio-mq-dmqtt-frontend"
          - name: MQ_PORT
            value: "8883"
          - name: MQ_DATA_TOPIC
            value: "http-device-data/input"
          - name: MQ_ERROR_TOPIC
            value: "http-device-data/input-error"           
          - name: SSL_CERT_FILE
            value: "/var/run/certs/ca.crt"
          - name: MQ_SAT_TOKEN
            value: "/var/run/secrets/tokens/mq-sat"
        resources:
          requests:
            "{{PLACEHOLDER}}" : "1"
            memory: 11Mi
            cpu: 10m
          limits:
            "{{PLACEHOLDER}}" : "1"
            memory: 24Mi
            cpu: 24m
        volumeMounts:
        - name: mq-sat
          mountPath: /var/run/secrets/tokens
        - name: trust-bundle
          mountPath: /var/run/certs
      volumes:
      - name: mq-sat
        projected:
          sources:
          - serviceAccountToken:
              path: mq-sat
              audience: aio-mq # Must match audience in BrokerAuthentication
              expirationSeconds: 86400
      - name: trust-bundle
        configMap:
          name: aio-ca-trust-bundle-test-only # Default root CA cert
      imagePullSecrets:
      - name: acr-auth
  instanceServiceSpec:
    type: ClusterIP
    ports:
    - name: akri-custom-instance-service
      port: 6052
      protocol: TCP
      targetPort: 6052
  configurationServiceSpec:
    type: ClusterIP
    ports:
    - name: akri-custom-configuration-service
      port: 6052
      protocol: TCP
  brokerProperties:
    json_schema: |
        {
          "type": "object",
          "properties": {
            "temperature": { "type": "number" },
            "humidity": { "type": "number" }
          },
          "required": ["temperature", "humidity"]
        }
  capacity: 1 # maximum number of nodes that can schedule workloads on a resource
```

- `apiVersion`: Specifies the API version used for the configuration file.
- `kind`: Specifies the kind of Kubernetes object, in this case, `Configuration`.
- `metadata`: Provides metadata about the configuration, such as its name.
- `spec`: Defines the specification for discovering and utilizing the device sensors.
  - `protocol`: Defines the protocol used by the device sensors.
  - `discoveryHandler`: Specifies the method used for discovering the sensors.
  - `properties`: Lists any additional properties required for sensor discovery and configuration.

## Configuration Options Detailed Explanation

### Environment Variables and Broker Properties

- **Environment Variables**: Set in the `brokerPodSpec` section under `containers -> env`. They configure the operation of the container application specified by the `image` field. For MQTT communication with Azure IoT Operations (AIO), the following environment variables are used:
    - `DATA_MQ_ENDPOINT`: Specifies the MQTT endpoint URL.
    - `MQ_PORT`: Specifies the port for the MQTT endpoint.
    - `MQ_DATA_TOPIC` and `MQ_ERROR_TOPIC`: Define the MQTT topics for sending data and errors, respectively.
    - `SSL_CERT_FILE`: Specifies the path to the SSL certificate for secure communication.
    - `MQ_SAT_TOKEN`: Specifies the path to the Service Account Token (SAT) for authentication.

### Volumes and Volume Mounts

- **Volumes**: Defined under `brokerPodSpec -> volumes`, they are used for mounting data into pods. In this configuration:
    - `mq-sat`: Mounts Service Account Tokens for authentication.
    - `trust-bundle`: Mounts SSL certificates for secure communication.
- **Volume Mounts**: Specified under `containers -> volumeMounts`, they define where the volumes are mounted inside the container. For example:
    - `mq-sat` is mounted at `/var/run/secrets/tokens`.
    - `trust-bundle` is mounted at `/var/run/certs`.

### JSON Schema

- **`json_schema`**: Defined under `brokerProperties`, it specifies the [JSON schema validation](#json-schema-example) rules for validating the JSON response from the `httpDevice` endpoint. This ensures that the data received from devices matches the expected format.
  
#### JSON Schema Example
```json
{
  "$id": "https://example.com/address.schema.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "description": "An address similar to http://microformats.org/wiki/h-card",
  "type": "object",
  "properties": {
    "postOfficeBox": {
      "type": "string"
    },
    "extendedAddress": {
      "type": "string"
    },
    "streetAddress": {
      "type": "string"
    },
    "locality": {
      "type": "string"
    },
    "region": {
      "type": "string"
    },
    "postalCode": {
      "type": "string"
    },
    "countryName": {
      "type": "string"
    }
  },
  "required": [ "locality", "region", "countryName" ],
  "dependentRequired": {
    "postOfficeBox": [ "streetAddress" ],
    "extendedAddress": [ "streetAddress" ]
  }
}
