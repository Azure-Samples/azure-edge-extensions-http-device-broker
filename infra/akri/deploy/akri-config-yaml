---
# Source: akri/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: akri-controller-sa
  labels:
    helm.sh/chart: akri-0.12.20
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.20"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: akri-controller
    app.kubernetes.io/component: controller
---
# Source: akri/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: akri-agent-sa
  labels:
    helm.sh/chart: akri-0.12.20
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.20"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: akri-agent
    app.kubernetes.io/component: agent
---
# Source: akri/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "akri-controller-role"
  labels:
    helm.sh/chart: akri-0.12.20
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.20"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: akri-controller
    app.kubernetes.io/component: controller
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete", "deletecollection"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["akri.sh"]
  resources: ["instances"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: ["akri.sh"]
  resources: ["configurations"]
  verbs: ["get", "list", "watch"]
---
# Source: akri/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "akri-agent-role"
  labels:
    helm.sh/chart: akri-0.12.20
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.20"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: akri-agent
    app.kubernetes.io/component: agent
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["akri.sh"]
  resources: ["instances"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["akri.sh"]
  resources: ["configurations"]
  verbs: ["get", "list", "watch"]
---
# Source: akri/templates/rbac.yaml
apiVersion: 'rbac.authorization.k8s.io/v1'
kind: 'ClusterRoleBinding'
metadata:
  name: 'akri-controller-binding'
  namespace: azure-iot-operations
  labels:
    helm.sh/chart: akri-0.12.20
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.20"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: akri-controller
    app.kubernetes.io/component: controller
roleRef:
  apiGroup: ''
  kind: 'ClusterRole'
  name: 'akri-controller-role'
subjects:
  - kind: 'ServiceAccount'
    name: 'akri-controller-sa'
    namespace: azure-iot-operations
---
# Source: akri/templates/rbac.yaml
apiVersion: 'rbac.authorization.k8s.io/v1'
kind: 'ClusterRoleBinding'
metadata:
  name: 'akri-agent-binding'
  namespace: azure-iot-operations
  labels:
    helm.sh/chart: akri-0.12.20
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.20"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: akri-agent
    app.kubernetes.io/component: agent
roleRef:
  apiGroup: ''
  kind: 'ClusterRole'
  name: 'akri-agent-role'
subjects:
  - kind: 'ServiceAccount'
    name: 'akri-agent-sa'
    namespace: azure-iot-operations
---
# Source: akri/templates/agent.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: akri-agent-daemonset
  labels:
    helm.sh/chart: akri-0.12.20
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.20"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: akri-agent
    app.kubernetes.io/component: agent
spec:
  selector:
    matchLabels:
      app.kubernetes.io/part-of: akri
      app.kubernetes.io/instance: akri
      app.kubernetes.io/name: akri-agent
  template:
    metadata:
      labels:
        helm.sh/chart: akri-0.12.20
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.20"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: akri-agent
        app.kubernetes.io/component: agent
    spec:
      nodeSelector:
        "kubernetes.io/os": linux
      serviceAccountName: 'akri-agent-sa'
      containers:
      - name: akri-agent
        image: "ghcr.io/project-akri/akri/agent:v0.12.20"
        resources:
          requests:
            memory: 11Mi
            cpu: 10m
          limits:
            memory: 79Mi
            cpu: 26m
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        env:
          - name: HOST_CRICTL_PATH
            value: /usr/local/bin/crictl
          - name: HOST_RUNTIME_ENDPOINT
            value: unix:///host/run/containerd/containerd.sock
          - name: HOST_IMAGE_ENDPOINT
            value: unix:///host/run/containerd/containerd.sock
          - name: AGENT_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: DISCOVERY_HANDLERS_DIRECTORY
            value: /var/lib/akri
        volumeMounts:
          - name: discovery-handlers
            mountPath: /var/lib/akri
          - name: device-plugin
            mountPath: /var/lib/kubelet/device-plugins
          - name: var-run-dockershim
            mountPath: /host/run/containerd/containerd.sock
      imagePullSecrets:
        - name: acr-auth
      volumes:
      - name: discovery-handlers
        hostPath:
          path: /var/lib/akri
      - name: device-plugin
        hostPath:
          path: "/var/lib/kubelet/device-plugins"
      - name: var-run-dockershim
        hostPath:
          path: "/run/k3s/containerd/containerd.sock"
---
# Source: akri/templates/custom-discovery-handler.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: akri-http-discovery-daemonset
  labels:
    helm.sh/chart: akri-0.12.20
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.20"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: akri-http-discovery
    app.kubernetes.io/component: discovery-handler
spec:
  selector:
    matchLabels:
      app.kubernetes.io/part-of: akri
      app.kubernetes.io/instance: akri
      app.kubernetes.io/name: akri-http-discovery
  template:
    metadata:
      labels:
        helm.sh/chart: akri-0.12.20
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.20"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: akri-http-discovery
        app.kubernetes.io/component: discovery-handler
    spec:
      containers:
      - name: akri-http-discovery
        image: "repository-test:latest"
        resources:
          requests:
            memory: 11Mi
            cpu: 10m
          limits:
            memory: 24Mi
            cpu: 24m
        env:
        - name: DISCOVERY_HANDLERS_DIRECTORY
          value: /var/lib/akri
        volumeMounts:
        - name: discovery-handlers
          mountPath: /var/lib/akri
      imagePullSecrets:
        - name: acr-auth
      nodeSelector:
        "kubernetes.io/os": linux
      volumes:
      - name: discovery-handlers
        hostPath:
          path: /var/lib/akri
---
# Source: akri/templates/controller.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: akri-controller-deployment
  labels:
    helm.sh/chart: akri-0.12.20
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.20"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: akri-controller
    app.kubernetes.io/component: controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/part-of: akri
      app.kubernetes.io/instance: akri
      app.kubernetes.io/name: akri-controller
  template:
    metadata:
      labels:
        helm.sh/chart: akri-0.12.20
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.20"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: akri-controller
        app.kubernetes.io/component: controller
    spec:
      serviceAccountName: 'akri-controller-sa'
      containers:
      - name: akri-controller
        image: "ghcr.io/project-akri/akri/controller:v0.12.20"
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
        resources:
          requests:
            memory: 11Mi
            cpu: 10m
          limits:
            memory: 100Mi
            cpu: 26m
      imagePullSecrets:
        - name: acr-auth
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      nodeSelector:
        "kubernetes.io/os": linux
---
# Source: akri/templates/webhook-configuration.yaml
apiVersion: v1
kind: List
metadata:
  name: akri-webhook-configuration
  labels:
    helm.sh/chart: akri-0.12.20
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.20"
    app.kubernetes.io/managed-by: Helm
items:
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: akri-webhook-configuration
      namespace: azure-iot-operations
      labels:
        helm.sh/chart: akri-0.12.20
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.20"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: akri-webhook-configuration
        app.kubernetes.io/component: admission-webhook
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: akri-webhook-configuration
      namespace: azure-iot-operations
      labels:
        helm.sh/chart: akri-0.12.20
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.20"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: akri-webhook-configuration
        app.kubernetes.io/component: admission-webhook
    rules:
    - apiGroups: [""]
      resources: ["pods"]
      verbs: ["get"]
  - apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: akri-webhook-configuration
      namespace: azure-iot-operations
      labels:
        helm.sh/chart: akri-0.12.20
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.20"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: akri-webhook-configuration
        app.kubernetes.io/component: admission-webhook
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: akri-webhook-configuration
    subjects:
    - kind: ServiceAccount
      name: akri-webhook-configuration
      namespace: azure-iot-operations
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: akri-webhook-configuration
      labels:
        helm.sh/chart: akri-0.12.20
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.20"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: akri-webhook-configuration
        app.kubernetes.io/component: admission-webhook
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/part-of: akri
          app.kubernetes.io/instance: akri
          app.kubernetes.io/name: akri-webhook-configuration
      template:
        metadata:
          labels:
            helm.sh/chart: akri-0.12.20
            app.kubernetes.io/part-of: akri
            app.kubernetes.io/instance: akri
            app.kubernetes.io/version: "0.12.20"
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: akri-webhook-configuration
            app.kubernetes.io/component: admission-webhook
        spec:
          serviceAccountName: akri-webhook-configuration
          containers:
          - name: webhook
            image: "ghcr.io/project-akri/akri/webhook-configuration:v0.12.20"
            imagePullPolicy: Always
            resources:
              requests:
                memory: 100Mi
                cpu: 15m
              limits:
                memory: 100Mi
                cpu: 26m
            args:
            - --tls-crt-file=/secrets/tls.crt
            - --tls-key-file=/secrets/tls.key
            - --port=8443
            volumeMounts:
            - name: secrets
              mountPath: /secrets
              readOnly: true
          volumes:
            - name: secrets
              secret:
                secretName: akri-webhook-configuration
          imagePullSecrets:
            - name: acr-auth
          tolerations:
            - key: node-role.kubernetes.io/master
              effect: NoSchedule
          nodeSelector:
            "kubernetes.io/os": linux
  - apiVersion: v1
    kind: Service
    metadata:
      name: akri-webhook-configuration
      labels:
        helm.sh/chart: akri-0.12.20
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.20"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: akri-webhook-configuration
        app.kubernetes.io/component: admission-webhook
    spec:
      selector:
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/name: akri-webhook-configuration
      ports:
        - name: http
          port: 443
          targetPort: 8443
  - apiVersion: admissionregistration.k8s.io/v1
    kind: ValidatingWebhookConfiguration
    metadata:
      name: akri-webhook-configuration
      labels:
        helm.sh/chart: akri-0.12.20
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.20"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: akri-webhook-configuration
        app.kubernetes.io/component: admission-webhook
    webhooks:
      - name: akri-webhook-configuration.azure-iot-operations.svc
        clientConfig:
          service:
            name: akri-webhook-configuration
            namespace: azure-iot-operations
            port: 443
            path: "/validate"
        rules:
          - operations:
              - "CREATE"
              - "UPDATE"
            apiGroups:
              - akri.sh
            apiVersions:
              - v0
            resources:
              - "configurations"
            scope: "*"
        admissionReviewVersions:
          - v1
          - v1beta1
        sideEffects: None
---
# Source: akri/templates/webhook-cert-autogen.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: akri-webhook-configuration-patch
  namespace: azure-iot-operations
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: akri-0.12.20
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.20"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
---
# Source: akri/templates/webhook-cert-autogen.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: akri-webhook-configuration-patch
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: akri-0.12.20
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.20"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    verbs:
      - get
      - update
---
# Source: akri/templates/webhook-cert-autogen.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: akri-webhook-configuration-patch
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: akri-0.12.20
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.20"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: akri-webhook-configuration-patch
subjects:
  - kind: ServiceAccount
    name: akri-webhook-configuration-patch
    namespace: "azure-iot-operations"
---
# Source: akri/templates/webhook-cert-autogen.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: akri-webhook-configuration-patch
  namespace: azure-iot-operations
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: akri-0.12.20
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.20"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - create
---
# Source: akri/templates/webhook-cert-autogen.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: akri-webhook-configuration-patch
  namespace: azure-iot-operations
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade,post-install,post-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: akri-0.12.20
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.20"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: akri-webhook-configuration-patch
subjects:
  - kind: ServiceAccount
    name: akri-webhook-configuration-patch
    namespace: "azure-iot-operations"
---
# Source: akri/templates/webhook-cert-autogen.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: akri-webhook-configuration-create
  namespace: azure-iot-operations
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: akri-0.12.20
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.20"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
spec:
  ttlSecondsAfterFinished: 0
  template:
    metadata:
      name: akri-webhook-configuration-create
      labels:
        helm.sh/chart: akri-0.12.20
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.20"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: create
          image: "registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.1.1"
          imagePullPolicy: IfNotPresent
          args:
            - create
            - --host=akri-webhook-configuration,akri-webhook-configuration.azure-iot-operations.svc
            - --namespace=azure-iot-operations
            - --secret-name=akri-webhook-configuration
            - --cert-name=tls.crt
            - --key-name=tls.key
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
      restartPolicy: OnFailure
      serviceAccountName: akri-webhook-configuration-patch
---
# Source: akri/templates/webhook-cert-autogen.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: akri-webhook-configuration-patch
  namespace: azure-iot-operations
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: akri-0.12.20
    app.kubernetes.io/part-of: akri
    app.kubernetes.io/instance: akri
    app.kubernetes.io/version: "0.12.20"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
spec:
  ttlSecondsAfterFinished: 0
  template:
    metadata:
      name: akri-webhook-configuration-patch
      labels:
        helm.sh/chart: akri-0.12.20
        app.kubernetes.io/part-of: akri
        app.kubernetes.io/instance: akri
        app.kubernetes.io/version: "0.12.20"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: patch
          image: "registry.k8s.io/ingress-nginx/kube-webhook-certgen:v1.1.1"
          imagePullPolicy: IfNotPresent
          args:
            - patch
            - --webhook-name=akri-webhook-configuration
            - --namespace=azure-iot-operations
            - --patch-mutating=false
            - --secret-name=akri-webhook-configuration
            - --patch-failure-policy=Fail
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
      restartPolicy: OnFailure
      serviceAccountName: akri-webhook-configuration-patch
